This lab is for getting comfortable with network management

You will want to understand the FCAPS model of TMN / NMS. As number of managed network elements increases, the likelihood of a failure in some element approaches 1. To detect, prevent and remediate failures, you need to utilize NMS tools and practices. Note, there are fantastic commercial tools for most of this, but their installation, care and feeding is beyond the scope of this lab. You will use freeware that is easy to get setup, even if it is ugly and incomplete. 
One of the largest contributors to unstability is miscofiguration. In this lab, we will set up software to simplify applying configuration changes, to detect when configuration change occurs, and to back up configurations, so that a device can be easily restored to a previous known-good state.

Firstly, you will setup a Fault Monitoring server
 - Setup a server running Linux. Ensure it is reachable at Layer 3 from all network elements
 - Create folder called "/NMS"
 - Ensure that RSyslog or a compatable syslog server daemon is installed
   - Configure the Syslog daemon to accept events from external sources
   - Configure the Syslog daemon to start at boot-up time
 - Configure the Syslog daemon to write all logged events to a file in "/NMS/logs"
 - Generate events using either Adiscon's Logger or built-in logger command on a remote system or configure a network element to use the new server as its log destination and cause it to emit events
   - http://www.monitorware.com/en/logger/index.php
 - 

Next setup a server to manage configurations: Note, this only handles activities like provisioning configuration and backing up, but does not handle drift-prevention, Eventually, we'll replace this with a tool that acts like Puppet or CFEngine, but that space is kind of sparse for Cisco routers
 - This can (and for the time being probably should) be the same server
 - Create a folder "/NMS/www/" 
 - Install a webserver daemon (such as Apache or mongoose) and configure it to serve static files from "/NMS/www/"
 - Create a folder "/WWW/bin"
 - Create a script in "/WWW/bin" that: 
   - takes two parms, a routername and a config-file name, 
   - then logs into the named router via slogin / SSH (safely storing, retrieving and passing to the router credentials is left as an exercize for the reader), 
   - gets into enable mode, 
   - issues the command "configure network http://NMS-server/named-config.cfg"
   - issues the command "write memory"
   - logs everything it does to syslog
   - logs out of the router cleanly (you don't want to chew up all five "line vty" sessions; you'd then have to use the console to kill sessions)
 - If you want to be really awesome (double bonus extra credit and a beer on pay-day), make a script for validation:
   - takes two parms, a routername and a config-file name, 
   - Reads in the contents of the config file
     - Parses contexts and stanzas
     - makes a list of commands or sets of commands that should exist
     - makes a list of commands starting with "no", which should not exist
   - then logs into the named router via slogin / SSH (safely storing, retrieving and passing to the router credentials is left as an exercize for the reader), 
   - gets into enable mode, 
   - issues a "write terminal",
   - parse the output of "write terminal",
     - search for all commands that should be there,
     - search for all "no" commands that should be absent,
   - Gives a passing or failing score, based on all applied commands being successfully applied
   - Writes the routername and pass or fail to the syslog

